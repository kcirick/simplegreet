actions.c:         strncpy(req.body.request_start_session.cmd, greeter->selected_command, 127);
actions.c:   if (greeter->selected_command) {
actions.c:      free(greeter->selected_command);
actions.c:      greeter->selected_command = NULL;
actions.c:   greeter->selected_command = g_strdup(gtk_combo_box_text_get_active_text((GtkComboBoxText*)ctx->command_selector));
greeter.c:   for (guint idx = 0; idx < greeter->windows->len; idx++) {
greeter.c:      struct Window *ctx = g_array_index(greeter->windows, struct Window*, idx);
greeter.c:   for (guint idx = 0; idx < greeter->windows->len; idx++) {
greeter.c:      struct Window *ctx = g_array_index(greeter->windows, struct Window*, idx);
greeter.c:   for (guint idx = 0; idx < greeter->windows->len; idx++) {
greeter.c:      struct Window *ctx = g_array_index(greeter->windows, struct Window*, idx);
greeter.c:      if (greeter->focused_window) 
greeter.c:         greeter->focused_window = NULL;
greeter.c:      g_array_remove_index_fast(greeter->windows, idx);
greeter.c:   //struct Window *old = greeter->focused_window;
greeter.c:   greeter->focused_window = win;
greeter.c:   for (guint idx = 0; idx < greeter->windows->len; idx++) {
greeter.c:      struct Window *ctx = g_array_index(greeter->windows, struct Window*, idx);
greeter.c:    if (greeter->question != NULL) {
greeter.c:        free(greeter->question);
greeter.c:        greeter->question = NULL;
greeter.c:    if (greeter->error != NULL) {
greeter.c:        free(greeter->error);
greeter.c:        greeter->error = NULL;
greeter.c:    greeter->question_type = type;
greeter.c:        greeter->question = g_strdup(question);
greeter.c:        greeter->error = g_strdup(error);
greeter.c:    greeter->question_cnt += 1;
greeter.c:    for (guint idx = 0; idx < greeter->windows->len; idx++) {
greeter.c:        struct Window *ctx = g_array_index(greeter->windows, struct Window*, idx);
greeter.c:    snprintf(greeter->time, 8, "%02d:%02d", now_tm->tm_hour, now_tm->tm_min);
greeter.c:    for (guint idx = 0; idx < greeter->windows->len; idx++) {
greeter.c:        struct Window *ctx = g_array_index(greeter->windows, struct Window*, idx);
greeter.c:   greeter->app = gtk_application_new("wtf.kl.simplegreeter", G_APPLICATION_DEFAULT_FLAGS);
greeter.c:   greeter->windows = g_array_new(FALSE, TRUE, sizeof(struct Window*));
greeter.c:   greeter->question_cnt = 1;
greeter.c:   greeter->draw_clock_source = g_timeout_add_seconds(5, greeter_update_clocks_handler, greeter);
greeter.c:   if (greeter->question != NULL) {
greeter.c:      free(greeter->question);
greeter.c:      greeter->question = NULL;
greeter.c:   if (greeter->error != NULL) {
greeter.c:      free(greeter->error);
greeter.c:      greeter->error = NULL;
greeter.c:   g_object_unref(greeter->app);
greeter.c:   g_array_unref(greeter->windows);
greeter.c:   if (greeter->draw_clock_source > 0) {
greeter.c:      g_source_remove(greeter->draw_clock_source);
greeter.c:      greeter->draw_clock_source = 0;
main.c:   for (guint idx = 0; idx < greeter->windows->len; idx++) {
main.c:      struct Window *ctx = g_array_index(greeter->windows, struct Window*, idx);
main.c:      if (greeter->focused_window == w) {
main.c:         greeter->focused_window = NULL;
main.c:   for (guint idx = 0; idx < greeter->windows->len; idx++) {
main.c:      struct Window *win = g_array_index(greeter->windows, struct Window*, idx);
main.c:   if (greeter->use_layer_shell) {
main.c:   greeter->use_layer_shell = use_layer_shell;
main.c:   greeter->command = command;
main.c:      greeter->background = gdk_pixbuf_new_from_file(background, &error);
main.c:      if (greeter->background == NULL)
main.c:   g_signal_connect(greeter->app, "activate", G_CALLBACK(activate), NULL);
main.c:   int status = g_application_run(G_APPLICATION(greeter->app), argc, argv);
window.c:    gtk_label_set_markup((GtkLabel*)ctx->top_label, greeter->time);
window.c:   if (greeter->focused_window != NULL && ctx != greeter->focused_window) 
window.c:      if (greeter->question_cnt == ctx->question_cnt) 
window.c:      window_setup_body(ctx, greeter->error);
window.c:   ctx->question_cnt = greeter->question_cnt;
window.c:   if (greeter->use_layer_shell) 
window.c:   if (greeter->use_layer_shell) 
window.c:   gdk_cairo_set_source_pixbuf(cr, greeter->background, 0, 0);
window.c:   g_array_append_val(greeter->windows, w);
window.c:   w->window = gtk_application_window_new(greeter->app);
window.c:   if (greeter->background != NULL) {
